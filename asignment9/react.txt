Q.1 What are hooks in react? how to identify hooks?

Ans. React Hooks are simple JavaScript functions that we can use to isolate the reusable part from a functional component. Hooks can be stateful and can manage side-effects. React provides a bunch of standard in-built hooks: useState : To manage states. Returns a stateful value and an updater function to update it.

Q.2 Explain useState Hook & what can you achieve with it?

Ans. useState is React Hook that allows you to add state to a functional component. It returns an array with two values: the current state and a function to update it. The Hook takes an initial state value as an argument and returns an updated state value whenever the setter function is called.

Q.3 How to pass data from one component to another component.

Ans. One way to get components to start talking to each other is using props. A parent component can pass an argument down to a child component as a prop. An example of this can be seen between the Container component and the Item component. Container fetches a list of data and stores it in the variable list .

Q.4 What is the significance of the "key" prop in React lists, and why is it important to use it correctly?

Ans. A key is a special string attribute you should include when creating arrays of elements. Key prop helps React identify which items have changed, are added, or are removed. Most often we use ID from our data as key: const todoItems = todos.

Q.5 What is the significance of using "setState" instead of modifying state directly in React?

Ans. It ensures that the component has been updated and calls for re-rendering of the component. setState is asynchronous call means if synchronous call get called it may not get updated at right time like to know current value of object after update using setState it may not get give current updated value on console.

Q.6 Explain the concept of React fragments and when you should use them.

Ans. React Fragment is a feature in React that allows you to return multiple elements from a React component by allowing you to group a list of children without adding extra nodes to the DOM. To return multiple elements from a React component, you'll need to wrap the element in a root element.

Q.7 How do you handle conditional rendering in React?

Ans. Conditional rendering in React works the same way conditions work in JavaScript. Use JavaScript operators like if or the conditional operator to create elements representing the current state, and let React update the UI to match them.